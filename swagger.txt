openapi: 3.0.4
info:
  title: POS API
  description: |
    Software as a Service platform for catering and beauty businesses.  
    All endpoints are secured with JWT bearer authentication. The business id and user/employee id are extracted from the JWT
  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Business:
      type: object
      required:
        - name
        - contact_email
      properties:
        id:
          type: integer
        name:
          type: string
        description: 
          type: string
        address:
          type: string
        contact_email:
          type: string
        phone_number:
          type: string 
    
    User:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        business_id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
          enum: [owner, employee]
    
    Product:
      type: object
      required:
        - name
        - price
        - tax_rate
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
          minimum: 0
        discount_amount:
          type: number
          format: decimal
        tax_rate:
          type: number
          format: decimal
          example: 21
          minimum: 0
          maximum: 100
    
    Order:
      type: object
      required:
        - employee_id
        - items
      properties:
        id:
          type: integer
        employee_id:
          type: integer
          description: Id of employee that took the order
        customer:
          type: string
          description: Optional customer identifier (table no., full name etc.)
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum: [open, paid, cancelled, refunded]
        subtotal:
          type: number
          format: decimal
        tax_amount:
          type: number
          format: decimal
        service_charge_amount:
          type: number
          format: decimal
        discount_amount:
          type: number
          format: decimal
        total_amount:
          type: number
          format: decimal
        tip:
          type: number
          format: decimal
    
    OrderItem:
      type: object
      required:
        - order_item_id
        - product_id
        - quantity
      properties:
        order_item_id:
          type: integer
        product_id:
          type: integer
        variation_id:
          type: integer
        discount_amount:
          type: number
          format: decimal
        quantity:
          type: integer
          minimum: 1
          
    Discount:
      type: object
      required:
        - name
        - amount
        - type
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        amount:
          type: number
          format: decimal
        amount_type:
          type: string
          enum: [fixed, percentage]
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time

    Tax:
      type: object
      required:
        - business_id
        - name
        - rate 
        - applies_to
      properties:
        id: 
          type: integer
        business_id:
          type: integer
        name:
          type: string
        rate:
          type: number
          format: decimal
        applies_to:
          type: string
        effective_from:
          type: string
          format: date-time
        effective_to:
          type: string
          format: date-time

    Service:
      type: object
      required:
        - business_id
        - name
        - price
      properties:
        id:
          type: integer
        business_id:
          type: integer
        name: 
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
        duration_minutes:
          type: integer
        tax_rate:
          type: number
          format: decimal
    
    Appointment:
      type: object
      required:
        - service_provider_name
        - service_title
        - appointment_time
        - duration_minutes
        - customer_info
      properties:
        id:
          type: integer
        employee_id:
          type: integer
          description: Id of employee booking the appointment
        service_provider_name:
          type: string
          description: Full name of employee performing the service
        service_title:
          type: string
          example: "Spa"
        service_description:
          type: string
          example: "Massage and salt bath"
        booked_at:
          type: string
          format: date-time
        appointment_time:
          type: string
          format: date-time
        duration_minutes:
          type: integer
          minimum: 1
        customer_info:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
              format: email
            phone_number:
              type: string
        status:
          type: string
          enum: [scheduled, completed, cancelled]

paths:
  /orders:
    post:
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - product_id
                      - quantity
                    properties:
                      product_id:
                        type: integer
                        example: 0
                      variation_id:
                        type: integer
                        example: 0
                      quantity:
                        type: integer
                        minimum: 1
                        example: 1
                customer:
                  type: string
      responses:
        '200':
          description: Order created successfully
        '400':
          description: Invalid input

    
    get:
      summary: Get orders
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, paid, cancelled, refunded]
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
  
  /orders/{orderId}:
    get:
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    
    put:
      summary: Update an open order
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - product_id
                      - quantity
                    properties:
                      product_id:
                        type: integer
                        example: 0
                      variation_id:
                        type: integer
                        example: 0
                      quantity:
                        type: integer
                        minimum: 1
                        example: 1
                customer:
                  type: string
      responses:
        '200':
          description: Order updated successfully
        '404':
          description: Order not found
        '409':
          description: Cannot modify closed order
    
    delete:
      summary: Cancel an open order
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order cancelled successfully
        '404':
          description: Order not found
        '409':
          description: Cannot cancel closed order
  
  /orders/{orderId}/pay:
    post:
      summary: Process payment for an order
      description: |
        Handles both full and split payments.
        
        If `split_type` is not provided or set to `none`, the entire order will be paid in full. `splits` array contains only one element.
        
        If `split_type` is `percentage` or `perItem`, one object per paying customer in `splits` array.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                split_type:
                  type: string
                  enum: [none, percentage, perItem]
                splits:
                  type: array
                  items:
                    type: object
                    required:
                      - payment_method
                    properties:
                      payment_method:
                        type: string
                        enum: [cash, card, giftCard]
                      percentage:
                        type: number
                        format: decimal
                        minimum: 1
                        maximum: 99
                        example: 50
                      order_item_ids:
                        type: array
                        items:
                          type: integer
                          example: [0, 2, 3]
                      tip:
                        type: number
                        format: decimal
      responses:
        '200':
          description: Payment processed successfully
        '400':
          description: Invalid input
        '404':
          description: Order not found
        '409':
          description: Order is already closed
  
  /orders/{orderId}/refund:
    post:
      summary: Refund a paid order
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order refunded successfully
        '404':
          description: Order not found
        '409':
          description: Cannot refund open or already refunded order
          
  /orders/{orderId}/receipt:
    get:
      summary: Get receipt of order
      description: Retrieve a detailed receipt for a paid or refunded order, including itemized totals and tax breakdown.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order receipt
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    example: 123
                  customer:
                    type: string
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: integer
                        variation_id:
                          type: integer
                        name:
                          type: string
                        quantity:
                          type: integer
                          minimum: 1
                        discount_amount:
                          type: number
                          format: decimal
                        total_price:
                          type: number
                          format: decimal
                          minimum: 0.01
                  subtotal:
                    type: number
                    format: decimal
                    description: Total amount before tax.
                    example: 0.01
                  tax_amount:
                    type: number
                    format: decimal
                    description: Tax amount applied to the subtotal.
                    minimum: 0.01
                  service_charge_amount:
                    type: number
                    format: decimal
                  discount_amount:
                    type: number
                    format: decimal
                  total:
                    type: number
                    format: decimal
                    description: Final total amount including tax.
                    example: 0.02
                  tip:
                    type: number
                    format: decimal
                  date_time:
                    type: string
                    format: date-time
        '404':
          description: Order not found
        '409':
          description: Order is still open

  
  /appointments:
    post:
      summary: Create a new appointment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - service_provider_name
                - service_title
                - appointment_time
                - duration_minutes
                - customer_info
              properties:
                service_provider_name:
                  type: string
                service_title:
                  type: string
                  example: "Spa"
                service_description:
                  type: string
                appointment_time:
                  type: string
                  format: date-time
                duration_minutes:
                  type: integer
                  minimum: 1
                customer_info:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                      format: email
                    phone_number:
                      type: string
      responses:
        '200':
          description: Appointment created successfully
        '400':
          description: Employee unable to perform service at selected time
    
    get:
      summary: Get appointments
      security:
        - bearerAuth: []
      parameters:
        - name: service_provider_name
          in: query
          schema:
            type: string
        - name: service_title
          in: query
          schema:
            type: string
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
        - name: customer_name
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [scheduled, completed, cancelled]
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  appointments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
  
  /appointments/{appointmentId}:
    get:
      summary: Get appointment by ID
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
          
    put:
      summary: Update an appointment
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                service_provider_name:
                  type: string
                service_title:
                  type: string
                service_description:
                  type: string
                appointment_time:
                  type: string
                  format: date-time
                duration_minutes:
                  type: integer
                customer_info:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                      format: email
                    phone_number:
                      type: string
      responses:
        '200':
          description: Appointment updated successfully
        '400':
          description: Invalid input
        '409':
          description: Appointment is already completed
    
    delete:
      summary: Cancel an appointment
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointment deleted succesfully
        '409':
          description: Appointment is already completed
  
  /products:
    post:
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - tax_rate
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: decimal
                  minimum: 0.01
                tax_rate:
                  type: number
                  example: 21
                  minimum: 0
                  maximum: 100
      responses:
        '200':
          description: Product created successfully
    
    get:
      summary: Get all products
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
  
  /products/{productId}:
    get:
      summary: Get product by ID
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
  
    put:
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: decimal
                  minimum: 0.01
                tax_rate:
                  type: number
                  format: decimal
                  example: 9
                  minimum: 0
                  maximum: 100
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Invalid input
        '404':
          description: Product not found
    
    delete:
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
          
  /products/{productId}/variations:
    post:
      summary: Create a product variation
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - priceChange
                - tax_rate
              properties:
                name:
                  type: string
                description:
                  type: string
                priceChange:
                  type: number
                  format: decimal
                  minimum: 0
      responses:
        '200':
          description: Product variation created successfully
        '404':
          description: Product not found
  
    get:
      summary: Get all variations for a product
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of product variations
          content:
            application/json:
              schema:
                type: object
                properties:
                  variations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        product_id:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        priceChange:
                          type: number
                          format: decimal
                          minimum: 0
        '404':
          description: Product not found
  
    put:
      summary: Update a product variation
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
        - name: variationId
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                priceChange:
                  type: number
                  format: decimal
                  minimum: 0
      responses:
        '200':
          description: Product variation updated successfully
        '400':
          description: Invalid input
        '404':
          description: Product variation not found
  
    delete:
      summary: Delete a product variation
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
        - name: variationId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product variation deleted successfully
        '404':
          description: Product variation not found

  /discounts:
    post:
      summary: Create a discount
      description: |
        Create a discount on the backend, which is applied to every product or order automatically.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - amount
                - amount_type
              properties:
                name:
                  type: string
                description:
                  type: string
                amount:
                  type: number
                  format: decimal
                  example: 20
                amount_type:
                  type: string
                  enum: [fixed, percentage]
                  example: "percentage"
                start_time:
                  type: string
                  format: date-time
                end_time:
                  type: string
                  format: date-time

      responses:
        '200':
          description: Discount created successfully
        '400':
          description: Invalid input
  
    get:
      summary: Get all discounts
      security:
        - bearerAuth: []
      parameters:
        - name: active
          in: query
          schema:
            type: boolean
          description: Filter only active discounts
      responses:
        '200':
          description: List of discounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  discounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Discount'

  /discounts/{discountId}:
    get:
      summary: Get discount by id
      security:
        - bearerAuth: []
      parameters:
        - name: discountId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Discount details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        '404':
          description: Discount not found
  
    put:
      summary: Update a discount
      security:
        - bearerAuth: []
      parameters:
        - name: discountId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - amount
                - amount_type
              properties:
                name:
                  type: string
                description:
                  type: string
                amount:
                  type: number
                  format: decimal
                  example: 2.99
                amount_type:
                  type: string
                  enum: [fixed, percentage]
                  example: "fixed"
                start_time:
                  type: string
                  format: date-time
                end_time:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Discount updated successfully
        '400':
          description: Invalid input
        '404':
          description: Discount not found
  
    delete:
      summary: Delete a discount
      security:
        - bearerAuth: []
      parameters:
        - name: discountId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Discount deleted successfully
        '404':
          description: Discount not found

  /users:
    post:
      tags:
        - Accessible only to owner user
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: User created successfully
        '400':
          description: Invalid input
    
    get:
      tags:
        - Accessible only to owner user
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  
  /users/{userId}:
    put:
      tags:
        - Accessible only to owner user
      summary: Update a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
    
    delete:
      tags:
        - Accessible only to owner user
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
  